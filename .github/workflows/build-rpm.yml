name: Build RPM Package

on:
  repository_dispatch:
    types: [build-distributions]

# Security: Restrict permissions to minimum required
permissions:
  contents: write  # Required for release uploads
  id-token: write  # Required for SLSA attestation

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Python
      uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
      with:
        python-version: '3.10'
        
    - name: Install uv
      uses: astral-sh/setup-uv@f2d60f03b23ce44c12b80ca600d6d94e20dbc855 # v4.1.1
      
    - name: Install dependencies
      run: uv sync
      
    - name: Build wheel
      run: uv build --wheel
      
    - name: Install RPM build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm rpmbuild python3-pip
        pip install wheel2rpm
        
    - name: Convert wheel to RPM
      run: |
        wheel2rpm --python-version 3 --rpm-dist el8 dist/*.whl
        
    - name: Set up GPG
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --yes --import
        # Create secure passphrase file
        echo "$GPG_PASSPHRASE" > /tmp/gpg_passphrase
        chmod 600 /tmp/gpg_passphrase
        # Configure GPG for non-interactive use
        mkdir -p ~/.gnupg
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        echo "yes" >> ~/.gnupg/gpg.conf
        
    - name: Sign RPM packages
      run: |
        # Configure RPM signing
        echo "%_signature gpg" >> ~/.rpmmacros
        echo "%_gpg_name SOT Release Signing" >> ~/.rpmmacros
        echo "%_gpgbin /usr/bin/gpg" >> ~/.rpmmacros
        
        for rpm in dist/*.rpm; do
          # Sign RPM package
          rpm --define "_gpg_name SOT Release Signing" --addsign "$rpm"
          # Also create detached signature
          gpg --batch --yes --pinentry-mode loopback --passphrase-file /tmp/gpg_passphrase --armor --detach-sign "$rpm"
        done
        
    - name: Generate checksums
      run: |
        cd dist
        sha256sum *.rpm *.rpm.asc > SHA256SUMS-RPM
        # Sign the checksums file
        gpg --batch --yes --pinentry-mode loopback --passphrase-file /tmp/gpg_passphrase --clearsign SHA256SUMS-RPM
        mv SHA256SUMS-RPM.asc SHA256SUMS-RPM.sig
        
    - name: Get package info
      id: package_info
      run: |
        VERSION="${{ github.event.client_payload.tag }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "package_name=$(ls dist/*.rpm | head -1 | xargs basename)" >> $GITHUB_OUTPUT
        
    - name: Upload to Release
      uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
      with:
        files: |
          dist/*.rpm
          dist/*.rpm.asc
          dist/SHA256SUMS-RPM
          dist/SHA256SUMS-RPM.sig
        tag_name: ${{ github.event.client_payload.tag }}
        generate_release_notes: false
        fail_on_unmatched_files: true
        append_body: true
        body: |
          
          ## ðŸ“¦ RPM Package
          - **Package**: `${{ steps.package_info.outputs.package_name }}`
          - **Version**: `${{ steps.package_info.outputs.version }}`
          - **Architecture**: x86_64
          - **Distribution**: EL8+
          - **GPG Signed**: âœ…
          
          ### Installation
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.event.client_payload.tag }}/${{ steps.package_info.outputs.package_name }}
          sudo rpm -ivh ${{ steps.package_info.outputs.package_name }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f /tmp/gpg_passphrase
        gpg-connect-agent killagent /bye || true
