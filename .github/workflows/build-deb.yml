name: Build DEB Package

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

# Security: Restrict permissions to minimum required
permissions:
  contents: write  # Required for release uploads
  id-token: write  # Required for SLSA attestation

jobs:
  build-deb:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Set up Python
      uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
      with:
        python-version: '3.10'
        
    - name: Install uv
      uses: astral-sh/setup-uv@f2d60f03b23ce44c12b80ca600d6d94e20dbc855 # v4.1.1
      
    - name: Install dependencies
      run: uv sync
      
    - name: Build wheel
      run: uv build --wheel
      
    - name: Install wheel2deb and signing tools
      run: |
        pip install wheel2deb
        sudo apt-get update
        sudo apt-get install -y dpkg-sig
      
    - name: Convert wheel to deb
      run: |
        wheel2deb --map "distro=distro" --map "py-cpuinfo=python3-cpuinfo" --map "psutil=python3-psutil" --map "rich=python3-rich" --map "textual=python3-textual" dist/*.whl
        
    - name: Set up GPG
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --yes --import
        # Create secure passphrase file
        echo "$GPG_PASSPHRASE" > /tmp/gpg_passphrase
        chmod 600 /tmp/gpg_passphrase
        # Configure GPG for non-interactive use
        mkdir -p ~/.gnupg
        echo "use-agent" >> ~/.gnupg/gpg.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        echo "yes" >> ~/.gnupg/gpg.conf
        
    - name: Sign DEB packages
      run: |
        for deb in output/*.deb; do
          dpkg-sig --sign builder --gpg-options "--batch --yes --pinentry-mode loopback --passphrase-file /tmp/gpg_passphrase" "$deb"
          # Also create detached signature
          gpg --batch --yes --pinentry-mode loopback --passphrase-file /tmp/gpg_passphrase --armor --detach-sign "$deb"
        done
        
    - name: Generate checksums
      run: |
        cd output
        sha256sum *.deb *.deb.asc > SHA256SUMS
        # Sign the checksums file
        gpg --batch --yes --pinentry-mode loopback --passphrase-file /tmp/gpg_passphrase --clearsign SHA256SUMS
        mv SHA256SUMS.asc SHA256SUMS.sig
        
    - name: Get package info
      id: package_info
      run: |
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        echo "package_name=$(ls output/*.deb | head -1 | xargs basename)" >> $GITHUB_OUTPUT
        
    - name: Upload to Release
      uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
      with:
        files: |
          output/*.deb
          output/*.deb.asc
          output/SHA256SUMS
          output/SHA256SUMS.sig
          .github/public-key.asc
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: true
        append_body: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f /tmp/gpg_passphrase
        gpg-connect-agent killagent /bye || true
